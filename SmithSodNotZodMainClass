//Program Documentation
//Author: Joshua Smith
//Course: CPT 187
//Purpose: Utilize random class to add prizes to the sod order program, MainClass drives everything
//Create Date: 12/6/2019

package edu.cpt187.smith.particiapation;
//Import Scanner for user input
import java.util.Scanner;

public class MainClass 
{
	//CONSTANTS
	public static final String MASTER_FILE_NAME = "masterFile.dat";
	public static final String[] MENU_OPTIONS = {"Load Inventory","Create Order","Quit"};

	public static void main(String[] args) 
	{
		//INTRODUCTION
		
		//Scanner for input
		Scanner input = new Scanner(System.in);
		//New Instance with default parameters
		SodOrder mySodOrder = new SodOrder();
		Inventory currentInventory = new Inventory();
		OrderWriter sodOrders = new OrderWriter(MASTER_FILE_NAME);
		
		//Initialize
		String userName = "";
		char menuSelection = ' ';
		//Welcome Banner
		displayWelcomeBanner();
								
		//UserName 
		userName = getUserName(input);
						
		//Validate Main Menu
		menuSelection = validateMainMenu(input);
		while(menuSelection != 'Q') //Loop until quit
		{
			//BODY
			//Load selection
			if(menuSelection =='A')
			{
				//Fills the stock to pull from file
				currentInventory.setLoadItems(getFileName(input));
				if(currentInventory.getRecordCount() < 0)
				{
					displayNotOpen();
				}
				else 
				{
					mySodOrder.setItemCountArray(currentInventory.getRecordCount());
				}
			}
			//Create order section
			else
			{
				currentInventory.setSearchIndex(validateSearchValue(input));
				if(currentInventory.getSearchIndex() < 0)
				{
					displayNotFound();
				}
				else 
				{
					mySodOrder.setItemSelection(currentInventory.getSearchIndex());
					mySodOrder.setItemName(currentInventory.getItemNames());
					mySodOrder.setItemPrice(currentInventory.getItemPrices());
					mySodOrder.setHowMany(validateHowMany(input));
					
					if(mySodOrder.getInStockCount(currentInventory.getInStockCounts()) < mySodOrder.getHowMany())
					{
						//If out of stock do not generate a report
						displayOutOfStock();
					}
					//In stock, will continue program
					else
					{
						mySodOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
						mySodOrder.setDiscountName(currentInventory.getDiscountNames());
						mySodOrder.setDiscountRate(currentInventory.getDiscountRates());
						mySodOrder.setDecreaseInStock(currentInventory);
						mySodOrder.setPrizeName(currentInventory.getPrizeNames());
						
						sodOrders.setWriteOrder(currentInventory.getItemID(), mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getTotalCost());
						//CONCLUSION
						if(mySodOrder.getDiscountRate() > 0.0)
						{
							//Method with everything, including discounts
							displayItemReceipt(mySodOrder.getItemName(),
									mySodOrder.getItemPrice(), mySodOrder.getHowMany(),
									mySodOrder.getDiscountName(), mySodOrder.getDiscountRate(),
									mySodOrder.getDiscountAmt(), mySodOrder.getDiscountPrice(),
									mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), 
									mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(),
									mySodOrder.getPrizeName());
						}
						else
						{
							//Overloaded method with no discounts
							displayItemReceipt(mySodOrder.getItemName(),
									mySodOrder.getItemPrice(), mySodOrder.getHowMany(),
									mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), 
									mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(),
									mySodOrder.getPrizeName());
						}
					}
				}
			}
			//Modify LCV
			menuSelection = validateMainMenu(input);
		}
		//Only Display a report if a order was made with a total over 0
		if(mySodOrder.getTotalCost() > 0.0 && mySodOrder.getDiscountCounts() != null)
		{
			currentInventory.setLoadItems(sodOrders.getFileName(), sodOrders.getRecordCount());
			displayFinalReport(userName, sodOrders.getRecordCount(), currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantity(), currentInventory.getOrderTotal(), 
					currentInventory.getDiscountNames(), mySodOrder.getDiscountCounts(), 
					currentInventory.getPrizeNames(), mySodOrder.getPrizeCounts(), 
					currentInventory.getInStockCounts());
		}
		//Farewell Banner
		displayFarewellMessage();
				
		//Close Scanner
		input.close();
	}//END OF MAIN
	
	//Void Methods (Displays)
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to the Sod Order program!");
		System.out.println("This program will help calculate the");
		System.out.println("price of your sod with discounts!");
	}//End of Welcome Banner
	public static void displayFarewellMessage()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Thank you for using the \nSod Order Program!");
	}//End of Farewell Banner
	public static void displayMainMenu()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");
		System.out.println("--------------------------------------------");
		System.out.printf("%-4s%-10s\n", "[A]", MENU_OPTIONS[0]);
		System.out.printf("%-4s%-10s\n", "[B]", MENU_OPTIONS[1]);
		System.out.printf("%-4s%-10s\n", "[Q]", MENU_OPTIONS[2]);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter selection here: ");
	}//End of main menu
	public static void displayHowMany()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("How many bags of Sod: ");
	}//End of display how many
	public static void displayItemMenu(String[] borrowedItemNames, double[] borrowedItemPrices)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Pick what Sod item you would like");
		System.out.println("--------------------------------------------");
		System.out.println("ITEM MENU");
		System.out.println("--------------------------------------------");
		System.out.printf("%-4s%-15s%1s%8.2f\n", "[A]", borrowedItemNames[0],"$", borrowedItemPrices[0]);
		System.out.printf("%-4s%-15s%1s%8.2f\n", "[B]", borrowedItemNames[1],"$", borrowedItemPrices[1]);
		System.out.printf("%-4s%-15s%1s%8.2f\n", "[C]", borrowedItemNames[2],"$", borrowedItemPrices[2]);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter selection here: ");
	}//End of item menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Pick what Sod discount you want to apply");
		System.out.println("--------------------------------------------");
		System.out.println("DISCOUNT MENU");
		System.out.println("--------------------------------------------");
		System.out.printf("%-4s%-15s%8.1f%-1s\n", "[A]", borrowedDiscountNames[0], borrowedDiscountRates[0]*100,"%");
		System.out.printf("%-4s%-15s%8.1f%-1s\n", "[B]", borrowedDiscountNames[1], borrowedDiscountRates[1]*100,"%");
		System.out.printf("%-4s%-15s%8.1f%-1s\n", "[C]", borrowedDiscountNames[2], borrowedDiscountRates[2]*100,"%");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter selection here: ");
	}//End of discount menu
	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, 
			int borrowedHowMany, String borrowedDiscountName, 
			double borrowedDiscountRate, double borrowedDiscountAmt,
			double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate,
			double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("The following Item receipt was generated!");
		System.out.println("--------------------------------------------");
		System.out.println("ITEM RECEIPT");
		System.out.println("--------------------------------------------");
		System.out.printf("%-26s%12s\n", "Sod item selected:", borrowedItemName);
		System.out.printf("%-25s%1s%12.2f\n\n", "Sod item Price:", "$" , borrowedItemPrice);
		System.out.printf("%-26s%12s\n", "Discount selected:", borrowedDiscountName);
		System.out.printf("%-25s%12.1f%1s\n", "Discount Rate:", borrowedDiscountRate*100, "%");
		System.out.printf("%-25s%1s%12.2f\n", "The discount amount:", "$" , borrowedDiscountAmt);
		System.out.printf("%-25s%1s%12.2f\n\n", "The discounted price:", "$" , borrowedDiscountPrice);
		System.out.printf("%-26s%12d\n\n", "How many bags of sod:", borrowedHowMany);
		System.out.printf("%-25s%1s%12.2f\n\n", "Sub-Total:", "$" , borrowedSubTotal);
		System.out.printf("%-25s%12.1f%1s\n", "Tax Rate:", borrowedTaxRate*100, "%");
		System.out.printf("%-25s%1s%12.2f\n\n", "The tax amount:", "$" , borrowedTaxAmt);
		System.out.printf("%-25s%1s%12.2f\n\n", "Total Cost:", "$" , borrowedTotalCost);
		System.out.printf("%-26s%12s\n", "Congrats! Your prize:", borrowedPrizeName);
	}//End of Item Receipt 
	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, 
			int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate,
			double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("The following Item receipt was generated!");
		System.out.println("--------------------------------------------");
		System.out.println("ITEM RECEIPT");
		System.out.println("--------------------------------------------");
		System.out.printf("%-26s%12s\n", "Sod item selected:", borrowedItemName);
		System.out.printf("%-25s%1s%12.2f\n\n", "Sod item Price:", "$" , borrowedItemPrice);
		System.out.printf("%-26s%12d\n\n", "How many bags of sod:", borrowedHowMany);
		System.out.printf("%-25s%1s%12.2f\n\n", "Sub-Total:", "$" , borrowedSubTotal);
		System.out.printf("%-25s%12.1f%1s\n", "Tax Rate:", borrowedTaxRate*100, "%");
		System.out.printf("%-25s%1s%12.2f\n\n", "The tax amount:", "$" , borrowedTaxAmt);
		System.out.printf("%-25s%1s%12.2f\n\n", "Total Cost:", "$" , borrowedTotalCost);
		System.out.printf("%-26s%12s\n", "Congrats! Your prize:", borrowedPrizeName);
	}//End of Item Receipt 
	public static void displayOutOfStock()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("The item is currently out of stock.");
	}//End of display out of stock
	public static void displayFinalReport(String borrowedUserName, int borrowedRecordCount, int[] borrowedIDs, String[] borrowedItemNames, double[] borrowedItemCost, int[] borrowedItemQuantity, double[] borrowedItemTotal, String[] borrowedDiscountNames,int[] borrowedDiscountCounts, String[] borrowedPrizeNames, int[] borrowedPrizeCounts, int[] borrowedInStockCounts)
	{
		int localIndex = 0;
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("The following final report was generated!");
		System.out.println("--------------------------------------------");
		System.out.println("FINAL REPORT");
		System.out.println("--------------------------------------------");
		System.out.printf("%-25s%12s\n", "Report generated for:", borrowedUserName);
		System.out.printf("%-25s%12d\n\n", "Amount of orders made:", borrowedRecordCount);
		
		//While loops to print out contents of file, for all stock. Also counts are printed
		while(localIndex < borrowedIDs.length && localIndex < borrowedRecordCount)
		{
			System.out.printf("%-25s%12d\n", "ID for order:", borrowedIDs[localIndex]);
			System.out.printf("%-25s%12s\n", "Name of selection:", borrowedItemNames[localIndex]);
			System.out.printf("%-24s%1s%12.2f\n", "Normal cost:","$", borrowedItemCost[localIndex]);
			System.out.printf("%-25s%12d\n", "Quantity Purchased:", borrowedItemQuantity[localIndex]);
			System.out.printf("%-24s%1s%12.2f\n\n", "Total for order:", "$", borrowedItemTotal[localIndex]);
			localIndex++;
		}
		localIndex = 0;
		System.out.println();
		
		System.out.printf("%-25s%12d\n", borrowedDiscountNames[0]+" Discounts:", borrowedDiscountCounts[0]);
		System.out.printf("%-25s%12d\n", borrowedDiscountNames[1]+" Discounts:", borrowedDiscountCounts[1]);
		System.out.printf("%-25s%12d\n\n", borrowedDiscountNames[2]+" Discounts:", borrowedDiscountCounts[2]);
		System.out.printf("%-25s%12d\n", borrowedPrizeNames[0]+" Prizes:", borrowedPrizeCounts[0]);
		System.out.printf("%-25s%12d\n", borrowedPrizeNames[1]+" Prizes:", borrowedPrizeCounts[1]);
		System.out.printf("%-25s%12d\n", borrowedPrizeNames[2]+" Prizes:", borrowedPrizeCounts[2]);
	}//End of Final Report
	public static void displayCountPrompt(String[] borrowedItemNames, int borrowedLocalIndex)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the Stock for "+borrowedItemNames[borrowedLocalIndex]+" here: ");
	}
	public static void displayNotOpen()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("\nThe File could not open!");
	}//End of display not open
	public static void displayNotFound()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("\nCould not be found with id!");
	}//End of display not found
	public static void displaySearchValuePrompt()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value here: ");
	}
	
	//Value Returning
	public static String getUserName(Scanner borrowedInput)
	{
		System.out.print("\nPlease enter your first name: ");
		return borrowedInput.next();
	}
	public static String getFileName(Scanner borrowedInput)
	{
		System.out.print("\nPlease enter the name of the file: ");
		return borrowedInput.next();
	}
	//Validates-(Also value returning)
	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//Validation Loop
		while (localSelection != 'A' && localSelection !='B' &&localSelection != 'Q')
		{
			System.out.println("Please enter a valid menu option.");
			//Display Menu
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);	
		}//End of Validation loop
		return localSelection;
	}//End of Validate Menu Selection
	public static int validateHowMany(Scanner borrowedInput)
	{
		int localHowMany = 0;
		displayHowMany();
		localHowMany = borrowedInput.nextInt();
		while(localHowMany <= 0)
		{
			System.out.println("Invalid, please enter a valid number above 0");
			displayHowMany();
			localHowMany = borrowedInput.nextInt();
		}
		return localHowMany;
	}//End of validate how many
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;
		displaySearchValuePrompt();
		localSearchValue = borrowedInput.nextInt();
		while(localSearchValue <= 0)
		{
			System.out.println("Invalid, please enter a valid number above 0");
			displaySearchValuePrompt();
			localSearchValue = borrowedInput.nextInt();
		}
		return localSearchValue;
	}//End of validate how many
	public static char validateItemMenu(Scanner borrowedInput, String[] borrowedItemNames, double[] borrowedItemPrices)
	{
		char localSelection = ' ';
		displayItemMenu(borrowedItemNames, borrowedItemPrices);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//Validation Loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			System.out.println("Please enter a valid menu option.");
			//Display Menu
			displayItemMenu(borrowedItemNames, borrowedItemPrices);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);	
		}//End of Validation loop
		return localSelection;
	}//End of Validate Menu Selection
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//Validation Loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			System.out.println("Please enter a valid menu option.");
			//Discount Menu
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);	
		}//End of Validation loop
		return localSelection;
	}//End of Validate Menu Selection
	public static int[] validateInStockCounts(Scanner borrowedInput, String[] borrowedItemNames)
	{
		int localCounter = 0;
		int localIndex = 0;
		int[] localCounts = new int[borrowedItemNames.length];
		
		while(localCounter < borrowedItemNames.length)
		{
			displayCountPrompt(borrowedItemNames, localIndex);
			localCounts[localIndex] = borrowedInput.nextInt();
			
			while(localCounts[localIndex] < 0)
			{
				System.out.println("Please enter a valid number above 0");
				displayCountPrompt(borrowedItemNames, localIndex);
				localCounts[localIndex] = borrowedInput.nextInt();
			}
			localCounter++;
			localIndex++;
		}
		return localCounts;
	}//End of validate in stock counts
}//END OF MAIN CLASS
